cmake_minimum_required(VERSION 3.10...3.18)

include(CMakePackageConfigHelpers)

project(basalt-headers VERSION 0.1.0)


include(GNUInstallDirs)
include(CTest) # note: this adds a BUILD_TESTING which defaults to ON
set(BUILD_TESTING OFF)

if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)
  if (NOT CMAKE_C_COMPILER_LAUNCHER AND NOT CMAKE_CXX_COMPILER_LAUNCHER)
    find_program(CCACHE_PROGRAM ccache)
    if(CCACHE_PROGRAM)
      message(STATUS "Found ccache: ${CCACHE_PROGRAM}")
      set(CMAKE_C_COMPILER_LAUNCHER   ${CCACHE_PROGRAM})
      set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE_PROGRAM})
    else()
      message(STATUS "Dind't find ccache")
    endif()
  else()
    message(STATUS "Compiler launcher already set. Not configuring ccache.")
    message(STATUS "CMAKE_C_COMPILER_LAUNCHER: ${CMAKE_C_COMPILER_LAUNCHER}")
    message(STATUS "CMAKE_CXX_COMPILER_LAUNCHER: ${CMAKE_CXX_COMPILER_LAUNCHER}")
  endif()

  IF( NOT CMAKE_BUILD_TYPE )
    SET( CMAKE_BUILD_TYPE Release)
  ENDIF()



  set(CMAKE_CXX_STANDARD 17)
  set(CMAKE_CXX_STANDARD_REQUIRED ON)
  set(CMAKE_CXX_EXTENSIONS OFF)


  # clang-specific compile flags
  if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
    set(BASALT_HEADERS_CXX_FLAGS "${BASALT_HEADERS_CXX_FLAGS} -Wno-exceptions -fcolor-diagnostics -frelaxed-template-template-args -Wno-error=deprecated-declarations")

    if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 10)
      # These are disabled to avoid lot's of warnings in Eigen code with clang 10
      set(BASALT_HEADERS_CXX_FLAGS "${BASALT_HEADERS_CXX_FLAGS} -Wno-misleading-indentation")
    endif()
  else()
    set(BASALT_HEADERS_CXX_FLAGS "${BASALT_HEADERS_CXX_FLAGS} -Wno-error=maybe-uninitialized")
  endif()


  set(CMAKE_CXX_FLAGS_DEBUG  "-O0 -g -DEIGEN_INITIALIZE_MATRICES_BY_NAN")          # cmake default: "-g"
  set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O3 -g -DEIGEN_INITIALIZE_MATRICES_BY_NAN")  # cmake default: "-O2 -g -DNDEBUG"
  set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG")                                      # cmake default: "-O3 -DNDEBUG"
  SET(CMAKE_CXX_FLAGS "-Wall -Werror -Wextra ${CMAKE_CXX_FLAGS} ${BASALT_HEADERS_CXX_FLAGS}")
  SET(CMAKE_CXX_FLAGS_COVERAGE "${CMAKE_CXX_FLAGS_DEBUG} --coverage -fno-inline -fno-inline-small-functions -fno-default-inline")
  SET(CMAKE_EXE_LINKER_FLAGS_COVERAGE "${CMAKE_EXE_LINKER_FLAGS_DEBUG} --coverage")
  SET(CMAKE_SHARED_LINKER_FLAGS_COVERAGE "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} --coverage")
  set(CMAKE_CXX_FLAGS_SANITIZERDEBUG "-O0 -g -DEIGEN_INITIALIZE_MATRICES_BY_NAN -fno-omit-frame-pointer -fsanitize=address,undefined")
  set(CMAKE_CXX_FLAGS_SANITIZERRELWITHDEBINFO "-O3 -g -DEIGEN_INITIALIZE_MATRICES_BY_NAN -fno-omit-frame-pointer -fsanitize=address,undefined")

endif()

function(report_dependency_location DEP_NAME DEP_TARGET)
  if(${DEP_NAME}_DIR)
    # this is set if dependency is found via find_package
    set(ACTUAL_DEP_CMAKE_DIR ${${DEP_NAME}_DIR})
  else()
    if(${CMAKE_VERSION} VERSION_GREATER_EQUAL "3.19.0")
      get_target_property(ACTUAL_DEP_CMAKE_DIR ${DEP_TARGET} SOURCE_DIR)
    else()
      # SOURCE_DIR works for interface targets only since 3.19
      set(ACTUAL_DEP_CMAKE_DIR "")
    endif()
  endif()
  get_target_property(ACTUAL_DEP_INCLUDE_DIR ${DEP_TARGET} INTERFACE_INCLUDE_DIRECTORIES)
  message(STATUS "Using ${DEP_NAME} from: ${ACTUAL_DEP_CMAKE_DIR} (include: ${ACTUAL_DEP_INCLUDE_DIR})")
endfunction()


find_package(Eigen3 3.4 REQUIRED)

report_dependency_location(Eigen3 Eigen3::Eigen)


find_package(Sophus REQUIRED)

report_dependency_location(Sophus Sophus::Sophus)


find_package(cereal REQUIRED)

report_dependency_location(cereal cereal::cereal)

add_library(basalt-headers INTERFACE)
add_library (basalt::basalt-headers ALIAS basalt-headers)
target_link_libraries(basalt-headers INTERFACE Eigen3::Eigen Sophus::Sophus cereal::cereal)

# Associate target with include directory
target_include_directories(basalt-headers INTERFACE
    "$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>"
    "$<INSTALL_INTERFACE:include>"
)

# List all header files with target_sources.
# This ensures, e.g., that QtCreator >= 6.0 properly recognize these headers to belong to the project.
# To support cmake < 3.13, use absolute paths (see: https://crascit.com/2016/01/31/enhanced-source-file-handling-with-target_sources/)
# target_sources(basalt-headers
#   INTERFACE
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/calibration/calib_bias.hpp
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/calibration/calibration.hpp
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/camera/bal_camera.hpp
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/camera/camera_static_assert.hpp
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/camera/double_sphere_camera.hpp
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/camera/extended_camera.hpp
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/camera/fov_camera.hpp
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/camera/generic_camera.hpp
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/camera/kannala_brandt_camera4.hpp
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/camera/pinhole_camera.hpp
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/camera/stereographic_param.hpp
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/camera/unified_camera.hpp
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/image/image.h
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/image/image_pyr.h
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/imu/imu_types.h
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/imu/preintegration.h
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/serialization/eigen_io.h
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/serialization/headers_serialization.h
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/spline/ceres_local_param.hpp
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/spline/ceres_spline_helper.h
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/spline/rd_spline.h
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/spline/se3_spline.h
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/spline/so3_spline.h
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/spline/spline_common.h
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/utils/assert.h
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/utils/eigen_utils.hpp
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/utils/hash.h
#     ${CMAKE_CURRENT_SOURCE_DIR}/include/basalt/utils/sophus_utils.hpp
# )
include(CMakePackageConfigHelpers)

write_basic_package_version_file(
    "${PROJECT_BINARY_DIR}/basalt-headersConfigVersion.cmake"
    VERSION 0.1
    COMPATIBILITY AnyNewerVersion
)

install(TARGETS basalt-headers
    EXPORT basalt-headersTargets
    LIBRARY DESTINATION lib COMPONENT Runtime
    ARCHIVE DESTINATION lib COMPONENT Development
    RUNTIME DESTINATION bin COMPONENT Runtime
    PUBLIC_HEADER DESTINATION include COMPONENT Development
    BUNDLE DESTINATION bin COMPONENT Runtime
)
configure_package_config_file(
    "${PROJECT_SOURCE_DIR}/cmake/basalt-headersConfig.cmake.in"
    "${PROJECT_BINARY_DIR}/basalt-headersConfig.cmake"
    INSTALL_DESTINATION lib/cmake/basalt-headers
)

install(EXPORT basalt-headersTargets DESTINATION lib/cmake/basalt-headers)
install(FILES "${PROJECT_BINARY_DIR}/basalt-headersConfigVersion.cmake"
              "${PROJECT_BINARY_DIR}/basalt-headersConfig.cmake"
        DESTINATION lib/cmake/basalt-headers)
install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/ DESTINATION include)


if((CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME OR BASALT_HEADERS_BUILD_TESTING) AND BUILD_TESTING)
  enable_testing()
  add_subdirectory(test)
endif()
